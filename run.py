from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio

import os
TOKEN = os.getenv("BOT_TOKEN")


bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

reminders = {}  # user_id -> interval (–≤ —á–∞—Å–∞—Ö)

def _schedule_send(user_id):
    # wrapper called by APScheduler; it schedules the coroutine on the asyncio loop
    asyncio.create_task(send_reminder(user_id))

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üí¨\n\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É:\n"
        "<b>/settime 2</b> ‚Äî —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–∏–Ω–∞–ª –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞\n"
        "<b>/stop</b> ‚Äî —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )

@dp.message(Command("settime"))
async def set_time(message: types.Message):
    try:
        interval = int(message.text.split()[1])
        user_id = message.from_user.id
        reminders[user_id] = interval

        # schedule the synchronous wrapper which will create the async task
        scheduler.add_job(_schedule_send, "interval", hours=interval, args=[user_id], id=str(user_id), replace_existing=True)
        await message.answer(f"‚úÖ –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ {interval} —á.")
    except:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /settime 2")

@dp.message(Command("stop"))
async def stop(message: types.Message):
    user_id = str(message.from_user.id)
    if scheduler.get_job(user_id):
        scheduler.remove_job(user_id)
        await message.answer("üõë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await message.answer("–¢—ã –∏ —Ç–∞–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—à—å üòÑ")

async def send_reminder(user_id):
    await bot.send_message(user_id, "‚è∞ –ü–æ—Ä–∞ –∫–æ–¥–∏—Ç—å, –¥—Ä—É–∂–∏—â–µ!")

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
